import { NextApiRequest, NextApiResponse } from 'next';
import { executeQuery } from '../../../../lib/db';
import { verifyToken } from '../../../../lib/auth';
import { EmailService } from '../../../../lib/email-service';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  // Ch·ªâ ch·∫•p nh·∫≠n ph∆∞∆°ng th·ª©c PUT
  if (req.method !== 'PUT') {
    return res.status(405).json({ success: false, message: 'Method not allowed' });
  }

  try {
    // L·∫•y token t·ª´ cookie
    const token = req.cookies.auth_token;
    
    // N·∫øu kh√¥ng c√≥ token
    if (!token) {
      return res.status(401).json({
        success: false,
        message: 'Unauthorized'
      });
    }
    
    // Verify token
    const decodedToken = verifyToken(token);
    
    if (!decodedToken || !decodedToken.id) {
      return res.status(401).json({
        success: false,
        message: 'Invalid session'
      });
    }

    // Ki·ªÉm tra quy·ªÅn admin
    const userResult = await executeQuery({
      query: 'SELECT role FROM users WHERE id = ?',
      values: [decodedToken.id],
    });

    if ((userResult as any[]).length === 0 || (userResult as any[])[0].role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Access denied'
      });
    }

    // L·∫•y th√¥ng tin t·ª´ body request
    const { orderId, orderStatus, paymentStatus } = req.body;

    // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!orderId || !orderStatus || !paymentStatus) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt'
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
    const orderResult = await executeQuery({
      query: `
        SELECT o.*, u.name as user_name, u.email as user_email, u.phone as user_phone
        FROM orders o 
        LEFT JOIN users u ON o.user_id = u.id 
        WHERE o.id = ?
      `,
      values: [orderId],
    });

    if ((orderResult as any[]).length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    const currentOrder = (orderResult as any[])[0];
    const oldOrderStatus = currentOrder.order_status;
    const oldPaymentStatus = currentOrder.payment_status;

    const validOrderStatuses = ['pending', 'confirmed', 'processing', 'shipping', 'completed', 'cancelled'];
    const validPaymentStatuses = ['pending', 'paid', 'failed'];

    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá cho tr·∫°ng th√°i ƒë∆°n h√†ng
    if (!validOrderStatuses.includes(orderStatus)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá'
      });
    }

    // Ki·ªÉm tra gi√° tr·ªã h·ª£p l·ªá cho tr·∫°ng th√°i thanh to√°n
    if (!validPaymentStatuses.includes(paymentStatus)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i thanh to√°n kh√¥ng h·ª£p l·ªá'
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    await executeQuery({
      query: `
        UPDATE orders 
        SET order_status = ?, payment_status = ?, updated_at = NOW()
        WHERE id = ?
      `,
      values: [orderStatus, paymentStatus, orderId],
    });

    // üî• G·ª¨I EMAIL C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI (n·∫øu c√≥ thay ƒë·ªïi)
    try {
      // Ch·ªâ g·ª≠i email n·∫øu tr·∫°ng th√°i ƒë∆°n h√†ng thay ƒë·ªïi
      if (orderStatus !== oldOrderStatus && currentOrder.user_email) {
        // L·∫•y th√¥ng tin chi ti·∫øt ƒë∆°n h√†ng ƒë·ªÉ g·ª≠i email
        const orderItemsResult = await executeQuery({
          query: 'SELECT * FROM order_items WHERE order_id = ?',
          values: [orderId],
        });

        const orderForEmail = {
          id: currentOrder.id,
          user_id: currentOrder.user_id || 'guest',
          user_name: currentOrder.user_name || currentOrder.customer_name,
          user_email: currentOrder.user_email || currentOrder.customer_email,
          user_phone: currentOrder.user_phone || currentOrder.customer_phone,
          total: currentOrder.total,
          order_status: orderStatus,
          payment_status: paymentStatus,
          address: currentOrder.address,
          note: currentOrder.note || '',
          created_at: currentOrder.created_at,
          items: (orderItemsResult as any[]).map((item: any) => ({
            name: item.product_name,
            quantity: item.quantity,
            price: item.price,
            image: ''
          }))
        };

        // G·ª≠i email c·∫≠p nh·∫≠t tr·∫°ng th√°i
        await EmailService.sendOrderStatusUpdate(orderForEmail, oldOrderStatus, orderStatus);
        console.log(`‚úÖ Order status update email sent to ${orderForEmail.user_email}`);
      }

      // G·ª≠i email payment confirmation n·∫øu payment status thay ƒë·ªïi t·ª´ pending -> paid
      if (paymentStatus === 'paid' && oldPaymentStatus !== 'paid' && currentOrder.user_email) {
        const orderForEmail = {
          id: currentOrder.id,
          user_id: currentOrder.user_id || 'guest',
          user_name: currentOrder.user_name || currentOrder.customer_name,
          user_email: currentOrder.user_email || currentOrder.customer_email,
          user_phone: currentOrder.user_phone || currentOrder.customer_phone,
          total: currentOrder.total,
          order_status: orderStatus,
          payment_status: paymentStatus,
          address: currentOrder.address,
          note: currentOrder.note || '',
          created_at: currentOrder.created_at,
          items: []
        };

        // G·ª≠i email x√°c nh·∫≠n thanh to√°n
        await EmailService.sendPaymentConfirmation(orderForEmail);
        console.log(`‚úÖ Payment confirmation email sent to ${orderForEmail.user_email}`);

        // G·ª≠i alert email cho admin v·ªÅ thanh to√°n th√†nh c√¥ng
        await EmailService.sendPaymentReceivedAlert(orderForEmail);
        console.log(`‚úÖ Payment received alert sent to admin`);
      }

    } catch (emailError) {
      console.error('‚ö†Ô∏è Failed to send status update emails:', emailError);
      // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn status update
    }

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh c√¥ng'
    });
    
  } catch (error: any) {
    console.error('Update order status error:', error);
    res.status(500).json({
      success: false,
      message: 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
} 