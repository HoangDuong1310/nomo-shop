import { useState, useEffect } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import { useRouter } from 'next/router';
import Layout from '../components/Layout';
import { FaArrowLeft, FaMapMarkerAlt, FaCreditCard, FaMoneyBillWave, FaCheck, FaUniversity } from 'react-icons/fa';
import Link from 'next/link';
import { useCart } from '../lib/context/CartContext';
import { toast } from 'react-toastify';
import { useAuth } from '../lib/context/AuthContext';
import { formatPrice } from '../lib/price-utils';
import { buildVietQRUrl } from '../lib/vietqr';

type FormData = {
  name: string;
  phone: string;
  address: string;
  note: string;
  paymentMethod: 'cod' | 'vnpay' | 'bank';
};

const Checkout: NextPage = () => {
  const router = useRouter();
  const { items, subtotal, clearCart, cartLoaded } = useCart();
  const { user, isAuthenticated } = useAuth();

  const [formData, setFormData] = useState<FormData>({
    name: '',
    phone: '',
    address: '',
    note: '',
    paymentMethod: 'cod',
  });
  const [paymentSettings, setPaymentSettings] = useState<any | null>(null);

  const [isFirstOrder, setIsFirstOrder] = useState(false);
  const [applyDiscount, setApplyDiscount] = useState(false);
  const [discountAmount, setDiscountAmount] = useState(0);
  // Mi·ªÖn ph√≠ giao h√†ng trong b√°n k√≠nh 3km (theo ch√≠nh s√°ch c·ª≠a h√†ng)
  const shippingFee = 0;
  const [errors, setErrors] = useState<{[key: string]: string}>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const total = subtotal + shippingFee - discountAmount;

  useEffect(() => {
    if (!cartLoaded) return; // wait until cart is hydrated
    if (items.length === 0) {
      // stay on page if user manually navigated without items? redirect as before
      router.push('/cart');
    }
  }, [items, cartLoaded, router]);

  // ƒêi·ªÅn th√¥ng tin t·ª´ user n·∫øu ƒë√£ ƒëƒÉng nh·∫≠p
  useEffect(() => {
    if (isAuthenticated && user) {
      setFormData(prev => ({
        ...prev,
        name: user.name || prev.name,
        phone: user.phone || prev.phone,
        address: user.address || prev.address
      }));
    }
  }, [isAuthenticated, user]);

  // T√≠nh kho·∫£ng c√°ch b·∫±ng Google/Maps ƒë√£ ƒë∆∞·ª£c t·∫Øt theo quy ƒë·ªãnh. Ph√≠ giao h√†ng m·∫∑c ƒë·ªãnh 0 trong b√°n k√≠nh 3 km.
  // Load public payment settings
  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/public/payment-settings');
        if (res.ok) {
          const data = await res.json();
          if (data && data.payment) {
            setPaymentSettings(data.payment);
            if (formData.paymentMethod === 'cod' && data.payment.accept_cash === false) {
              if (data.payment.accept_vnpay) setFormData(f => ({ ...f, paymentMethod: 'vnpay' }));
              else if (data.payment.accept_direct_bank || data.payment.accept_bank_transfer) setFormData(f => ({ ...f, paymentMethod: 'bank' }));
            }
          }
        }
      } catch (e) {
        // silent
      }
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Ki·ªÉm tra ƒë∆°n h√†ng ƒë·∫ßu ti√™n d·ª±a tr√™n s·ªë ƒëi·ªán tho·∫°i
  useEffect(() => {
    const checkFirstOrder = async () => {
      if (formData.phone && formData.phone.length >= 10) {
        try {
          const response = await fetch(`/api/check-first-order?phone=${encodeURIComponent(formData.phone)}`);
          const data = await response.json();
          setIsFirstOrder(data.isFirstOrder);
        } catch (error) {
          setIsFirstOrder(false);
        }
      }
    };

    checkFirstOrder();
  }, [formData.phone]);

  // C·∫≠p nh·∫≠t s·ªë ti·ªÅn gi·∫£m gi√° khi ng∆∞·ªùi d√πng ch·ªçn √°p d·ª•ng
  useEffect(() => {
    if (applyDiscount && isFirstOrder) {
      // Gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n, t·ªëi ƒëa 50.000ƒë
      const discount = Math.min(subtotal * 0.1, 50000);
      setDiscountAmount(discount);
    } else {
      setDiscountAmount(0);
    }
  }, [applyDiscount, isFirstOrder, subtotal]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // X√≥a l·ªói khi ng∆∞·ªùi d√πng s·ª≠a
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: '',
      }));
    }
  };

  const handlePaymentChange = (method: 'cod' | 'vnpay' | 'bank') => {
    setFormData((prev) => ({
      ...prev,
      paymentMethod: method,
    }));
  };

  const handleDiscountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setApplyDiscount(e.target.checked);
  };

  const validateForm = () => {
    const newErrors: {[key: string]: string} = {};
    
    if (!formData.name.trim()) {
      newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
    }
    
    if (!formData.phone.trim()) {
      newErrors.phone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i';
    } else if (!/^[0-9]{10,11}$/.test(formData.phone.trim())) {
      newErrors.phone = 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá';
    }
    
    if (!formData.address.trim()) {
      newErrors.address = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleOrder = async () => {
    if (!validateForm()) return;
    
    setIsSubmitting(true);
    
    try {
      // Chu·∫©n b·ªã d·ªØ li·ªáu ƒë∆°n h√†ng
      const orderData = {
        items: items.map(item => ({
          productId: item.productId,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          option: item.option || null,
        })),
        customerInfo: {
          name: formData.name,
          phone: formData.phone,
          address: formData.address,
          note: formData.note,
        },
        subtotal,
        shipping_fee: shippingFee,
        discount: discountAmount,
        total,
        payment_method: formData.paymentMethod,
      };
      
  if (formData.paymentMethod === 'vnpay') {
        // L∆∞u ƒë∆°n h√†ng tr∆∞·ªõc khi chuy·ªÉn sang trang thanh to√°n VNPay
        const response = await fetch('/api/orders/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(orderData),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
        }
        
        // T·∫°o URL thanh to√°n VNPay v√† chuy·ªÉn h∆∞·ªõng
        const payResp = await fetch('/api/payments/vnpay/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId: data.orderId }),
        });
        const payData = await payResp.json();
        if (!payResp.ok || !payData.success) {
          throw new Error(payData.message || 'Kh√¥ng t·∫°o ƒë∆∞·ª£c URL thanh to√°n VNPay');
        }
        
        // Redirect ngay l·∫≠p t·ª©c ƒë·∫øn VNPay, kh√¥ng clear cart ·ªü ƒë√¢y
        // Cart s·∫Ω ƒë∆∞·ª£c clear ·ªü trang complete sau khi thanh to√°n
  window.location.href = payData.redirectUrl;
      } else if (formData.paymentMethod === 'cod') {
        // Thanh to√°n COD
        const response = await fetch('/api/orders/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(orderData),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
        }
        
        // Show success message ng·∫Øn g·ªçn
        toast.success('üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!', {
          autoClose: 1000,
        });
        
        // Redirect t·∫•t c·∫£ ƒë·∫øn trang complete ƒë·ªÉ c√≥ UX consistent
        router.push(`/checkout/complete?orderId=${data.orderId}`);
  } else if (formData.paymentMethod === 'bank') {
        const response = await fetch('/api/orders/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(orderData),
        });
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng');
        }
        toast.info('ƒê∆°n h√†ng ƒë√£ t·∫°o. Vui l√≤ng chuy·ªÉn kho·∫£n theo h∆∞·ªõng d·∫´n.', { autoClose: 2000 });
        router.push(`/checkout/complete?orderId=${data.orderId}`);
      }
    } catch (error: any) {
      toast.error(error.message || 'C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i!');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Layout>
      <Head>
        <title>Thanh to√°n - Cloud Shop</title>
        <meta name="description" content="Thanh to√°n ƒë∆°n h√†ng t·∫°i Cloud Shop" />
      </Head>
      
      <div className="container-custom py-8">
        <div className="flex items-center mb-6">
          <Link href="/cart" className="text-primary-600 hover:text-primary-700 flex items-center">
            <FaArrowLeft className="mr-2" /> Quay l·∫°i gi·ªè h√†ng
          </Link>
        </div>
        
        <h1 className="text-3xl font-bold text-gray-800 mb-8">Thanh to√°n</h1>
        
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2">
            {/* Th√¥ng tin giao h√†ng */}
            <div className="bg-white rounded-lg shadow p-6 mb-6">
              <h2 className="text-xl font-bold mb-4">Th√¥ng tin giao h√†ng</h2>
              
              <div className="space-y-4">
                <div>
                  <label htmlFor="name" className="block text-gray-700 font-medium mb-2">
                    H·ªç t√™n
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    className={`input-field ${errors.name ? 'border-red-500' : ''}`}
                    placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
                  />
                  {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}
                </div>
                
                <div>
                  <label htmlFor="phone" className="block text-gray-700 font-medium mb-2">
                    S·ªë ƒëi·ªán tho·∫°i
                  </label>
                  <input
                    type="tel"
                    id="phone"
                    name="phone"
                    value={formData.phone}
                    onChange={handleChange}
                    className={`input-field ${errors.phone ? 'border-red-500' : ''}`}
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
                  />
                  {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>
                
                <div>
                  <label htmlFor="address" className="block text-gray-700 font-medium mb-2">
                    ƒê·ªãa ch·ªâ giao h√†ng
                  </label>
                  <textarea
                    id="address"
                    name="address"
                    value={formData.address}
                    onChange={handleChange}
                    rows={3}
                    className={`input-field ${errors.address ? 'border-red-500' : ''}`}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng ƒë·∫ßy ƒë·ªß"
                  />
                  {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
                </div>
                
                <div>
                  <label htmlFor="note" className="block text-gray-700 font-medium mb-2">
                    Ghi ch√∫ (t√πy ch·ªçn)
                  </label>
                  <textarea
                    id="note"
                    name="note"
                    value={formData.note}
                    onChange={handleChange}
                    rows={2}
                    className="input-field"
                    placeholder="Ghi ch√∫ th√™m v·ªÅ ƒë∆°n h√†ng ho·∫∑c giao h√†ng"
                  />
                </div>
                
                {/* Th√¥ng b√°o ch√≠nh s√°ch giao h√†ng */}
                <div className="p-4 border border-green-200 rounded-lg bg-green-50">
                  <div className="flex items-start text-green-700">
                    <FaMapMarkerAlt className="mr-2 mt-0.5 text-green-600" />
                    <p className="text-sm font-medium">
                      üöÄ Mi·ªÖn ph√≠ giao h√†ng trong b√°n k√≠nh 3km! C·ª≠a h√†ng cam k·∫øt giao h√†ng nhanh ch√≥ng v√† an to√†n ƒë·∫øn tay b·∫°n.
                    </p>
                  </div>
                </div>
              </div>
            </div>
            
            {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
            <div className="bg-white rounded-lg shadow p-6">
              <h2 className="text-xl font-bold mb-4">Ph∆∞∆°ng th·ª©c thanh to√°n</h2>
              <div className="space-y-4">
                {(!paymentSettings || paymentSettings.accept_cash) && (
                  <div className={`p-4 border rounded-lg cursor-pointer transition-colors ${formData.paymentMethod === 'cod' ? 'border-primary-500 bg-primary-50' : 'border-gray-200 hover:border-primary-300'}`}
                       onClick={() => handlePaymentChange('cod')}>
                    <div className="flex items-center">
                      <div className={`w-6 h-6 rounded-full mr-3 flex items-center justify-center ${formData.paymentMethod === 'cod' ? 'bg-primary-500' : 'border border-gray-300'}`}>{formData.paymentMethod === 'cod' && <FaCheck className="text-white text-sm" />}</div>
                      <div className="flex items-center">
                        <FaMoneyBillWave className="text-primary-500 text-xl mr-3" />
                        <div>
                          <p className="font-medium">Thanh to√°n khi nh·∫≠n h√†ng (COD)</p>
                          <p className="text-sm text-gray-500">Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n ƒë∆∞·ª£c h√†ng</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {paymentSettings && paymentSettings.accept_vnpay && (
                  <div className={`p-4 border rounded-lg cursor-pointer transition-colors ${formData.paymentMethod === 'vnpay' ? 'border-primary-500 bg-primary-50' : 'border-gray-200 hover:border-primary-300'}`}
                       onClick={() => handlePaymentChange('vnpay')}>
                    <div className="flex items-center">
                      <div className={`w-6 h-6 rounded-full mr-3 flex items-center justify-center ${formData.paymentMethod === 'vnpay' ? 'bg-primary-500' : 'border border-gray-300'}`}>{formData.paymentMethod === 'vnpay' && <FaCheck className="text-white text-sm" />}</div>
                      <div className="flex items-center">
                        <FaCreditCard className="text-primary-500 text-xl mr-3" />
                        <div>
                          <p className="font-medium">Thanh to√°n VNPay</p>
                          <p className="text-sm text-gray-500">Th·∫ª ng√¢n h√†ng, v√≠ ƒëi·ªán t·ª≠, QR code</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {paymentSettings && (paymentSettings.accept_direct_bank || paymentSettings.accept_bank_transfer) && (
                  <div className={`p-4 border rounded-lg cursor-pointer transition-colors ${formData.paymentMethod === 'bank' ? 'border-primary-500 bg-primary-50' : 'border-gray-200 hover:border-primary-300'}`}
                       onClick={() => handlePaymentChange('bank')}>
                    <div className="flex items-center">
                      <div className={`w-6 h-6 rounded-full mr-3 flex items-center justify-center ${formData.paymentMethod === 'bank' ? 'bg-primary-500' : 'border border-gray-300'}`}>{formData.paymentMethod === 'bank' && <FaCheck className="text-white text-sm" />}</div>
                      <div className="flex items-center">
                        <FaUniversity className="text-primary-500 text-xl mr-3" />
                        <div>
                          <p className="font-medium">Chuy·ªÉn kho·∫£n ng√¢n h√†ng</p>
                          <p className="text-sm text-gray-500">Chuy·ªÉn kho·∫£n th·ªß c√¥ng theo h∆∞·ªõng d·∫´n</p>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
                {formData.paymentMethod === 'bank' && paymentSettings && (
                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg text-sm">
                    <p className="font-medium mb-1">Th√¥ng tin chuy·ªÉn kho·∫£n:</p>
                    <p>Ng√¢n h√†ng: <span className="font-semibold">{paymentSettings.bank_name || 'C·∫≠p nh·∫≠t sau'}</span></p>
                    <p>S·ªë t√†i kho·∫£n: <span className="font-semibold">{paymentSettings.bank_account_number || 'C·∫≠p nh·∫≠t sau'}</span></p>
                    <p>Ch·ªß t√†i kho·∫£n: <span className="font-semibold">{paymentSettings.bank_account_name || 'C·∫≠p nh·∫≠t sau'}</span></p>
                    <p className="mt-2 text-gray-600">Vui l√≤ng chuy·ªÉn kho·∫£n theo th√¥ng tin tr√™n. ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω sau khi x√°c nh·∫≠n thanh to√°n.</p>
                    {paymentSettings.bank_code && paymentSettings.bank_account_number && (
                      <div className="mt-4">
                        <p className="font-medium mb-2">Qu√©t m√£ QR ƒë·ªÉ chuy·ªÉn kho·∫£n nhanh:</p>
                        <div className="bg-white p-3 rounded-md inline-block border">
                          {/* Use subtotal or total for amount? Use total */}
                          {/* Description limited spaces */}
                          {(() => {
                            const qrUrl = buildVietQRUrl({
                              bankCode: paymentSettings.bank_code,
                              accountNumber: paymentSettings.bank_account_number,
                              template: paymentSettings.bank_template || 'compact2',
                              amount: Math.max(0, Math.round(total)),
                              description: `Order ${formData.phone}`.substring(0, 40),
                              accountName: paymentSettings.bank_account_name || undefined,
                              fileExt: 'jpg'
                            });
                            return qrUrl ? <img src={qrUrl} alt="VietQR" className="w-64 h-auto" /> : null;
                          })()}
                        </div>
                        <p className="text-xs text-gray-500 mt-2">N·ªôi dung chuy·ªÉn kho·∫£n t·ª± ƒë·ªông: CloudShop {formData.phone}</p>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
          
          {/* T√≥m t·∫Øt ƒë∆°n h√†ng */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow p-6 sticky top-24">
              <h2 className="text-xl font-bold mb-4">T√≥m t·∫Øt ƒë∆°n h√†ng</h2>
              
              <div className="divide-y">
                {items.map((item) => (
                  <div key={`${item.productId}-${item.option || ''}`} className="py-3 flex justify-between">
                    <div>
                      <span className="font-medium">
                        {item.name} {item.option && `(${item.option})`}
                      </span>
                      <p className="text-sm text-gray-500">SL: {item.quantity}</p>
                    </div>
                    <div className="text-right">
                      <p>{formatPrice(item.price * item.quantity)}</p>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="border-t mt-4 pt-4">
                <div className="flex justify-between mb-2">
                  <span>T·∫°m t√≠nh:</span>
                  <span>{formatPrice(subtotal)}</span>
                </div>
                <div className="flex justify-between mb-2">
                  <span>Ph√≠ giao h√†ng:</span>
                  <span className="text-green-600 font-medium">Mi·ªÖn ph√≠ (trong b√°n k√≠nh 3km)</span>
                </div>
                
                {/* Gi·∫£m gi√° cho ƒë∆°n ƒë·∫ßu ti√™n */}
                {isFirstOrder && (
                  <div className="mb-2">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="applyDiscount"
                        checked={applyDiscount}
                        onChange={handleDiscountChange}
                        className="mr-2"
                      />
                      <label htmlFor="applyDiscount" className="text-sm text-primary-600">
                        √Åp d·ª•ng gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n
                      </label>
                    </div>
                    
                    {applyDiscount && (
                      <div className="flex justify-between mt-1 text-green-600">
                        <span>Gi·∫£m gi√°:</span>
                        <span>-{formatPrice(discountAmount)}</span>
                      </div>
                    )}
                  </div>
                )}
                
                <div className="flex justify-between font-bold text-lg pt-2 border-t">
                  <span>T·ªïng c·ªông:</span>
                  <span className="text-primary-600">{formatPrice(total)}</span>
                </div>
              </div>
              
              <div className="mt-6">
                <button
                  type="button"
                  onClick={handleOrder}
                  disabled={isSubmitting}
                  className="btn-primary w-full py-3 flex items-center justify-center"
                >
                  {isSubmitting ? (
                    <>
                      <span className="animate-spin inline-block h-4 w-4 border-t-2 border-b-2 border-white rounded-full mr-2"></span>
                      ƒêang x·ª≠ l√Ω...
                    </>
                  ) : (
                    'ƒê·∫∑t h√†ng'
                  )}
                </button>
              </div>
              
              <p className="text-sm text-gray-500 mt-4">
                B·∫±ng c√°ch ƒë·∫∑t h√†ng, b·∫°n ƒë·ªìng √Ω v·ªõi c√°c ƒëi·ªÅu kho·∫£n v√† ƒëi·ªÅu ki·ªán c·ªßa ch√∫ng t√¥i.
              </p>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default Checkout; 