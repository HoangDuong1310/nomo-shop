const mysql = require('mysql2/promise');
require('dotenv').config({ path: '.env.local' });

async function checkDatabaseConnections() {
  let connection;
  
  try {
    console.log('üîç Ki·ªÉm tra database connections...');
    
    connection = await mysql.createConnection({
      host: process.env.MYSQL_HOST || 'localhost',
      port: process.env.MYSQL_PORT || 3306,
      user: process.env.MYSQL_USER || 'root',
      password: process.env.MYSQL_PASSWORD || '',
      database: process.env.MYSQL_DATABASE || 'cloudshop'
    });

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng connections hi·ªán t·∫°i
    const [connections] = await connection.execute('SHOW STATUS LIKE "Threads_connected"');
    console.log('üìä Current connections:', connections);

    // Ki·ªÉm tra max connections
    const [maxConnections] = await connection.execute('SHOW VARIABLES LIKE "max_connections"');
    console.log('üìà Max connections:', maxConnections);

    // Hi·ªÉn th·ªã danh s√°ch processes
    const [processes] = await connection.execute('SHOW PROCESSLIST');
    console.log('üîç Current processes:');
    console.table(processes);

    // ƒê·ªÅ xu·∫•t settings
    console.log('\nüí° ƒê·ªÅ xu·∫•t:');
    console.log('- Gi·∫£m connectionLimit trong pool xu·ªëng 2-3');
    console.log('- S·ª≠ d·ª•ng connection timeout');
    console.log('- Implement connection pooling ƒë√∫ng c√°ch');
    
  } catch (error) {
    console.error('‚ùå Database error:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

if (require.main === module) {
  checkDatabaseConnections()
    .then(() => {
      console.log('\n‚úÖ Database check completed!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Check failed:', error);
      process.exit(1);
    });
}

module.exports = { checkDatabaseConnections };
