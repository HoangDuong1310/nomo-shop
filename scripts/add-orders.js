const { v4: uuidv4 } = require('uuid');
const mysql = require('mysql2/promise');

async function addSampleOrders() {
  // K·∫øt n·ªëi database
  const connection = await mysql.createConnection({
    host: process.env.MYSQL_HOST || 'localhost',
    port: parseInt(process.env.MYSQL_PORT || '3306'),
    user: process.env.MYSQL_USER || 'root',
    password: process.env.MYSQL_PASSWORD || '',
    database: process.env.MYSQL_DATABASE || 'cloudshop',
  });

  try {
    console.log('ƒêang th√™m d·ªØ li·ªáu m·∫´u cho ƒë∆°n h√†ng...');

    // L·∫•y danh s√°ch users ƒë·ªÉ tham chi·∫øu
    const [users] = await connection.execute(
      'SELECT id, name, phone FROM users WHERE role = "user" LIMIT 5'
    );

    if (users.length === 0) {
      console.log('Kh√¥ng c√≥ user n√†o trong database. Th√™m m·ªôt s·ªë user tr∆∞·ªõc.');
      return;
    }

    // L·∫•y danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ tham chi·∫øu
    const [products] = await connection.execute(
      'SELECT id, name, price FROM products LIMIT 10'
    );

    if (products.length === 0) {
      console.log('Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong database. Th√™m m·ªôt s·ªë s·∫£n ph·∫©m tr∆∞·ªõc.');
      return;
    }

    // T·∫°o 10 ƒë∆°n h√†ng m·∫´u
    const orderStatuses = ['pending', 'confirmed', 'processing', 'shipping', 'completed', 'cancelled'];
    const paymentMethods = ['cod', 'vnpay'];
    const paymentStatuses = ['pending', 'paid', 'failed'];
    
    for (let i = 0; i < 10; i++) {
      // Ch·ªçn ng·∫´u nhi√™n m·ªôt user
      const user = users[Math.floor(Math.random() * users.length)];
      
      // T·∫°o th√¥ng tin ƒë∆°n h√†ng
      const orderId = uuidv4();
      const orderItems = [];
      let subtotal = 0;
      
      // Th√™m 1-3 s·∫£n ph·∫©m v√†o ƒë∆°n h√†ng
      const numItems = Math.floor(Math.random() * 3) + 1;
      
      // Ch·ªçn s·∫£n ph·∫©m ng·∫´u nhi√™n kh√¥ng tr√πng l·∫∑p
      const selectedProductIndexes = new Set();
      while (selectedProductIndexes.size < numItems && selectedProductIndexes.size < products.length) {
        selectedProductIndexes.add(Math.floor(Math.random() * products.length));
      }
      
      // Th√™m c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn v√†o ƒë∆°n h√†ng
      for (const index of selectedProductIndexes) {
        const product = products[index];
        const quantity = Math.floor(Math.random() * 3) + 1;
        const itemTotal = parseFloat(product.price) * quantity;
        subtotal += itemTotal;
        
        orderItems.push({
          id: uuidv4(),
          product_id: product.id,
          product_name: product.name,
          price: parseFloat(product.price),
          quantity,
          subtotal: itemTotal,
        });
      }
      
      // T√≠nh ph√≠ giao h√†ng v√† t·ªïng ƒë∆°n h√†ng
      const shippingFee = Math.floor(Math.random() * 30000);
      const total = subtotal + shippingFee;
      
      // Ng√†y t·∫°o ƒë∆°n h√†ng (trong 30 ng√†y g·∫ßn ƒë√¢y)
      const createdAt = new Date();
      createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 30));
      
      // Ch·ªçn ng·∫´u nhi√™n tr·∫°ng th√°i ƒë∆°n h√†ng
      const orderStatus = orderStatuses[Math.floor(Math.random() * orderStatuses.length)];
      
      // Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† tr·∫°ng th√°i ph√π h·ª£p
      const paymentMethod = paymentMethods[Math.floor(Math.random() * paymentMethods.length)];
      let paymentStatus;
      
      if (orderStatus === 'cancelled') {
        paymentStatus = Math.random() > 0.5 ? 'pending' : 'failed';
      } else if (orderStatus === 'completed') {
        paymentStatus = 'paid';
      } else {
        paymentStatus = paymentStatuses[Math.floor(Math.random() * paymentStatuses.length)];
      }
      
      // T·∫°o ƒë∆°n h√†ng trong database
      await connection.execute(
        `INSERT INTO orders (
          id, user_id, full_name, phone, address, note, subtotal, 
          shipping_fee, total, payment_method, payment_status, order_status, created_at
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          orderId,
          user.id,
          user.name,
          user.phone,
          `ƒê·ªãa ch·ªâ m·∫´u ${i + 1}, Qu·∫≠n 1, TP. H·ªì Ch√≠ Minh`,
          `Ghi ch√∫ ƒë∆°n h√†ng ${i + 1}`,
          subtotal,
          shippingFee,
          total,
          paymentMethod,
          paymentStatus,
          orderStatus,
          createdAt
        ]
      );
      
      // T·∫°o c√°c m·ª•c ƒë∆°n h√†ng
      for (const item of orderItems) {
        await connection.execute(
          `INSERT INTO order_items (
            id, order_id, product_id, product_name, price, quantity, subtotal, created_at
          ) VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`,
          [
            item.id,
            orderId,
            item.product_id,
            item.product_name,
            item.price,
            item.quantity,
            item.subtotal
          ]
        );
      }
      
      console.log(`‚úÖ ƒê√£ t·∫°o ƒë∆°n h√†ng #${i + 1} v·ªõi ID: ${orderId}`);
    }
    
    console.log('\nüéâ ƒê√£ t·∫°o th√†nh c√¥ng 10 ƒë∆°n h√†ng m·∫´u!');
  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng m·∫´u:', error);
  } finally {
    await connection.end();
  }
}

addSampleOrders(); 