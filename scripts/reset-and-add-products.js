/**
 * Script: reset-and-add-products.js
 * M·ª•c ƒë√≠ch: Xo√° to√†n b·ªô s·∫£n ph·∫©m hi·ªán t·∫°i v√† th√™m b·ªô s·∫£n ph·∫©m m·ªõi theo y√™u c·∫ßu.
 * C·∫£nh b√°o: Script n√†y s·∫Ω XO√Å T·∫§T C·∫¢ products hi·ªán c√≥ (v√† c·∫£ product_variants, order_items li√™n quan n·∫øu kh√¥ng ch·ªânh s·ª≠a).
 * N·∫øu b·∫°n mu·ªën gi·ªØ l·ªãch s·ª≠ ƒë∆°n h√†ng, h√£y c√¢n nh·∫Øc KH√îNG xo√° b·∫£ng order_items (s·ª≠a bi·∫øn REMOVE_ORDER_ITEMS = false).
 */

const mysql = require('mysql2/promise');
const { v4: uuidv4 } = require('uuid');
const { loadEnvConfig } = require('./utils/env-loader');

// Load env (.env.local n·∫øu c√≥)
loadEnvConfig();

// C·∫•u h√¨nh tu·ª≥ ch·ªçn
const REMOVE_ORDER_ITEMS = true; // ƒê·∫∑t false n·∫øu kh√¥ng mu·ªën xo√° order_items (khi ƒë√≥ ph·∫£i gi·ªØ nguy√™n products c≈©)
const REMOVE_PRODUCT_VARIANTS = true; // Xo√° bi·∫øn th·ªÉ n·∫øu c√≥

async function main() {
  let connection;
  try {
    console.log('‚ö†Ô∏è  B·∫ÆT ƒê·∫¶U RESET S·∫¢N PH·∫®M');

    connection = await mysql.createConnection({
      host: process.env.DB_HOST || process.env.MYSQL_HOST || 'localhost',
      port: process.env.DB_PORT || process.env.MYSQL_PORT || 3306,
      user: process.env.DB_USER || process.env.MYSQL_USER || 'root',
      password: process.env.DB_PASSWORD || process.env.MYSQL_PASSWORD || '',
      database: process.env.DB_DATABASE || process.env.MYSQL_DATABASE || 'cloudshop'
    });

    console.log('‚úÖ K·∫øt n·ªëi DB th√†nh c√¥ng');

    // B·∫≠t transaction ƒë·ªÉ an to√†n
    await connection.beginTransaction();

    // Ki·ªÉm tra & xo√° order_items (n·∫øu b·∫≠t)
    if (REMOVE_ORDER_ITEMS) {
      console.log('üßπ Xo√° order_items...');
      await connection.execute('DELETE FROM order_items');
    } else {
      console.log('‚ÑπÔ∏è  Gi·ªØ nguy√™n order_items (c√≥ th·ªÉ g√¢y l·ªói n·∫øu xo√° products c√≥ FK).');
    }

    // Xo√° product_variants n·∫øu c√≥ b·∫£ng v√† ƒë∆∞·ª£c b·∫≠t
    if (REMOVE_PRODUCT_VARIANTS) {
      const [variantTable] = await connection.execute("SHOW TABLES LIKE 'product_variants'");
      if (variantTable.length) {
        console.log('üßπ Xo√° product_variants...');
        await connection.execute('DELETE FROM product_variants');
      }
    }

    // Xo√° t·∫•t c·∫£ s·∫£n ph·∫©m hi·ªán c√≥
    console.log('üßπ Xo√° products...');
    await connection.execute('DELETE FROM products');

    // Danh m·ª•c c·∫ßn ƒë·∫£m b·∫£o t·ªìn t·∫°i
    const categories = [
      { id: 'soda', name: 'Soda', description: 'C√°c lo·∫°i soda gi·∫£i kh√°t', image: null },
      { id: 'tea', name: 'Tr√†', description: 'C√°c lo·∫°i tr√† ƒë·∫∑c bi·ªát', image: null },
      { id: 'milk-tea', name: 'Tr√† s·ªØa', description: 'C√°c lo·∫°i tr√† s·ªØa', image: null },
      { id: 'yogurt', name: 'S·ªØa chua', description: 'ƒê·ªì u·ªëng t·ª´ s·ªØa chua', image: null },
      // ƒê·ªì ƒÉn: s·ª≠ d·ª•ng l·∫°i category 'food' n·∫øu ƒë√£ c√≥. N·∫øu ch∆∞a c√≥ th√¨ th√™m.
      { id: 'food', name: 'ƒê·ªì ƒÉn', description: 'C√°c m√≥n ƒÉn', image: null }
    ];

    console.log('üìÇ ƒê·∫£m b·∫£o danh m·ª•c t·ªìn t·∫°i...');
    for (const c of categories) {
      await connection.execute(
        `INSERT INTO categories (id, name, description, image) VALUES (?, ?, ?, ?)
         ON DUPLICATE KEY UPDATE name = VALUES(name)`,
        [c.id, c.name, c.description, c.image]
      );
    }

    // ƒê·ªãnh nghƒ©a s·∫£n ph·∫©m m·ªõi
    // Ghi ch√∫: Gi√° mang t√≠nh gi·∫£ ƒë·ªãnh. C√≥ th·ªÉ s·ª≠a l·∫°i theo nhu c·∫ßu th·ª±c t·∫ø.
    const DEFAULT_IMAGE = '/images/placeholder-drink.jpg';
    const DEFAULT_FOOD_IMAGE = '/images/placeholder-food.jpg';

    const products = [
      // Soda
      ['Soda d√¢u', 'soda', 30000],
      ['Soda chanh leo', 'soda', 30000],
      ['Soda d∆∞a l∆∞·ªõi', 'soda', 30000],
      ['Soda d∆∞a h·∫•u', 'soda', 30000],
      ['Soda vi·ªát qu·∫•t', 'soda', 32000],

      // Tr√†
      ['Tr√† matcha', 'tea', 35000],
      ['Tr√† v·∫£i hoa h·ªìng', 'tea', 35000],
      ['Tr√† d√¢u t·∫±m', 'tea', 35000],
      ['Tr√† b∆∞·ªüi h·ªìng m·∫≠t ong', 'tea', 38000],
      ['Tr√† xo√†i l·∫Øc chanh', 'tea', 38000],

      // Tr√† s·ªØa
      ['Tr√† s·ªØa matcha', 'milk-tea', 40000],
      ['Tr√† s·ªØa tr√¢n ch√¢u ƒë∆∞·ªùng ƒëen', 'milk-tea', 45000],
      ['Tr√† s·ªØa socola', 'milk-tea', 42000],
      ['Tr√† s·ªØa oolong', 'milk-tea', 42000],
      ['Tr√† s·ªØa Th√°i xanh', 'milk-tea', 42000],
      ['Tr√† s·ªØa Th√°i ƒë·ªè', 'milk-tea', 42000],

      // S·ªØa chua
      ['S·ªØa chua vi·ªát qu·∫•t', 'yogurt', 35000],
      ['S·ªØa chua d√¢u t√¢y', 'yogurt', 35000],
      ['S·ªØa vi·ªát qu·∫•t', 'yogurt', 33000],
      ['S·ªØa xo√†i', 'yogurt', 33000],

      // ƒê·ªì ƒÉn
      ['M√¨ cay', 'food', 55000],
      ['M√¨ tr·ªôn', 'food', 50000],
      ['S·ªØa t∆∞∆°i chi√™n', 'food', 45000],
      ['Mandu chi√™n', 'food', 48000],
      ['M√¨ √ù', 'food', 65000]
    ].map(([name, category_id, price]) => ({
      id: uuidv4(),
      name,
      description: '',
      price,
      sale_price: null,
      image: category_id === 'food' ? DEFAULT_FOOD_IMAGE : DEFAULT_IMAGE,
      category_id,
      stock_quantity: 100,
      is_featured: false,
      is_active: true,
      options: JSON.stringify([
        {
          name: 'Size',
            values: ['M', 'L'],
            prices: [0, 5000]
        }
      ])
    }));

    console.log(`‚ûï Th√™m ${products.length} s·∫£n ph·∫©m m·ªõi...`);
    for (const p of products) {
      await connection.execute(
        `INSERT INTO products (id, name, description, price, sale_price, image, category_id, stock_quantity, is_featured, is_active, options)
         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          p.id,
          p.name,
          p.description,
          p.price,
          p.sale_price,
          p.image,
          p.category_id,
          p.stock_quantity,
          p.is_featured,
          p.is_active,
          p.options
        ]
      );
    }

    await connection.commit();
    console.log('üéâ Ho√†n t·∫•t. Danh s√°ch s·∫£n ph·∫©m m·ªõi ƒë√£ ƒë∆∞·ª£c th√™m v√†o.');

    console.log('\nüìã S·∫£n ph·∫©m ƒë√£ th√™m:');
    for (const p of products) {
      console.log(` - ${p.name} (${p.category_id}) - ${p.price.toLocaleString()}ƒë`);
    }
  } catch (err) {
    if (connection) await connection.rollback();
    console.error('‚ùå L·ªói:', err.message);
    process.exitCode = 1;
  } finally {
    if (connection) await connection.end();
  }
}

if (require.main === module) {
  main();
}

module.exports = { main };
