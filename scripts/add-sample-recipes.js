const mysql = require('mysql2/promise');
const { v4: uuidv4 } = require('uuid');
const { loadEnvConfig } = require('./utils/env-loader');

// Load environment config
loadEnvConfig();

async function addSampleRecipes() {
  let connection;
  
  try {
    console.log('üç≥ Adding Sample Recipes to Cloud Shop');
    console.log('=====================================\n');

    // Create connection
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 3306,
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_DATABASE || 'cloudshop'
    });

    console.log('‚úÖ Connected to database');

    // Sample recipes data
    const recipes = [
      {
        id: `recipe-${uuidv4()}`,
        name: 'Ph·ªü B√≤ Truy·ªÅn Th·ªëng',
        description: 'M√≥n ph·ªü b√≤ ƒë·∫≠m ƒë√† h∆∞∆°ng v·ªã v·ªõi n∆∞·ªõc d√πng t·ª´ x∆∞∆°ng h·∫ßm 12 gi·ªù, th·ªãt b√≤ t∆∞∆°i ngon v√† c√°c lo·∫°i gia v·ªã ƒë·∫∑c tr∆∞ng',
        image: '/images/recipes/pho-bo.jpg',
        preparation_time: 30,
        cooking_time: 720,
        servings: 4,
        difficulty_level: 'hard',
        dietary_tags: JSON.stringify(['gluten_free']),
        cuisine_type: 'vietnamese',
        meal_type: 'breakfast',
        calories: 450,
        rating: 4.8,
        views: 1250,
        is_featured: 1,
        is_active: 1,
        ingredients: [
          { name: 'X∆∞∆°ng b√≤', quantity: '2', unit: 'kg', notes: 'X∆∞∆°ng ·ªëng v√† x∆∞∆°ng c·ª•c' },
          { name: 'Th·ªãt b√≤ t√°i', quantity: '300', unit: 'g', notes: 'Th√°i m·ªèng' },
          { name: 'B√°nh ph·ªü', quantity: '500', unit: 'g', notes: 'B√°nh ph·ªü t∆∞∆°i' },
          { name: 'H√†nh t√¢y', quantity: '2', unit: 'c·ªß', notes: null },
          { name: 'G·ª´ng', quantity: '100', unit: 'g', notes: 'N∆∞·ªõng' },
          { name: 'Qu·∫ø', quantity: '2', unit: 'thanh', notes: null },
          { name: 'H·ªìi', quantity: '3', unit: 'c√°i', notes: null },
          { name: 'Th·∫£o qu·∫£', quantity: '2', unit: 'qu·∫£', notes: null }
        ],
        steps: [
          { instruction: 'R·ª≠a s·∫°ch x∆∞∆°ng b√≤, ch·∫ßn qua n∆∞·ªõc s√¥i ƒë·ªÉ lo·∫°i b·ªè b·ªçt b·∫©n', duration: 15, tips: 'Ch·∫ßn trong 5 ph√∫t v·ªõi n∆∞·ªõc s√¥i' },
          { instruction: 'N∆∞·ªõng h√†nh t√¢y v√† g·ª´ng tr√™n l·ª≠a cho th∆°m', duration: 10, tips: 'N∆∞·ªõng cho ƒë·∫øn khi ch√°y x√©m b√™n ngo√†i' },
          { instruction: 'Rang qu·∫ø, h·ªìi, th·∫£o qu·∫£ trong ch·∫£o kh√¥', duration: 5, tips: 'Rang v·ªõi l·ª≠a nh·ªè ƒë·ªÉ kh√¥ng ch√°y' },
          { instruction: 'Cho x∆∞∆°ng v√†o n·ªìi n∆∞·ªõc l·∫°nh, ƒëun s√¥i r·ªìi h·∫° l·ª≠a nh·ªè ninh trong 12 gi·ªù', duration: 720, tips: 'Th·ªânh tho·∫£ng v·ªõt b·ªçt ƒë·ªÉ n∆∞·ªõc trong' },
          { instruction: 'L·ªçc n∆∞·ªõc d√πng, n√™m gia v·ªã v·ª´a ƒÉn', duration: 10, tips: 'D√πng n∆∞·ªõc m·∫Øm ngon v√† mu·ªëi' },
          { instruction: 'Tr·ª•ng b√°nh ph·ªü, x·∫øp v√†o t√¥ c√πng th·ªãt b√≤ t√°i', duration: 5, tips: 'Tr·ª•ng b√°nh ph·ªü qua n∆∞·ªõc s√¥i 10 gi√¢y' },
          { instruction: 'Chan n∆∞·ªõc d√πng s√¥i v√†o t√¥, th√™m h√†nh l√°, ng√≤', duration: 2, tips: 'N∆∞·ªõc ph·∫£i th·∫≠t s√¥i ƒë·ªÉ ch√≠n th·ªãt' }
        ]
      },
      {
        id: `recipe-${uuidv4()}`,
        name: 'B√°nh M√¨ Th·ªãt N∆∞·ªõng',
        description: 'B√°nh m√¨ Vi·ªát Nam gi√≤n r·ª•m v·ªõi th·ªãt n∆∞·ªõng th∆°m l·ª´ng, rau t∆∞∆°i v√† n∆∞·ªõc s·ªët ƒë·∫∑c bi·ªát',
        image: '/images/recipes/banh-mi.jpg',
        preparation_time: 20,
        cooking_time: 15,
        servings: 2,
        difficulty_level: 'easy',
        dietary_tags: JSON.stringify([]),
        cuisine_type: 'vietnamese',
        meal_type: 'lunch',
        calories: 380,
        rating: 4.6,
        views: 890,
        is_featured: 0,
        is_active: 1,
        ingredients: [
          { name: 'B√°nh m√¨', quantity: '2', unit: '·ªï', notes: 'B√°nh m√¨ Ph√°p' },
          { name: 'Th·ªãt ba ch·ªâ', quantity: '300', unit: 'g', notes: 'Th√°i m·ªèng' },
          { name: 'D∆∞a chu·ªôt', quantity: '1', unit: 'qu·∫£', notes: null },
          { name: 'C√† r·ªët', quantity: '1', unit: 'c·ªß', notes: 'Ng√¢m chua ng·ªçt' },
          { name: 'Ng√≤ r√≠', quantity: '50', unit: 'g', notes: null },
          { name: 'Pate', quantity: '100', unit: 'g', notes: null }
        ],
        steps: [
          { instruction: '∆Ø·ªõp th·ªãt v·ªõi t·ªèi, s·∫£, n∆∞·ªõc m·∫Øm, ƒë∆∞·ªùng trong 2 gi·ªù', duration: 120, tips: '∆Ø·ªõp qua ƒë√™m s·∫Ω ngon h∆°n' },
          { instruction: 'N∆∞·ªõng th·ªãt tr√™n than hoa ho·∫∑c ch·∫£o cho v√†ng ƒë·ªÅu', duration: 10, tips: 'L·ª≠a v·ª´a ƒë·ªÉ th·ªãt ch√≠n ƒë·ªÅu' },
          { instruction: 'C·∫Øt b√°nh m√¨, ph·∫øt pate v√† mayonnaise', duration: 2, tips: null },
          { instruction: 'X·∫øp th·ªãt n∆∞·ªõng, d∆∞a chu·ªôt, c√† r·ªët, ng√≤ v√†o b√°nh', duration: 2, tips: 'X·∫øp ƒë·∫πp m·∫Øt' },
          { instruction: 'R∆∞·ªõi n∆∞·ªõc s·ªët v√† th∆∞·ªüng th·ª©c', duration: 1, tips: null }
        ]
      },
      {
        id: `recipe-${uuidv4()}`,
        name: 'G·ªèi Cu·ªën Chay',
        description: 'G·ªèi cu·ªën thanh m√°t v·ªõi rau c·ªß t∆∞∆°i, b√∫n v√† n∆∞·ªõc ch·∫•m chay ƒë·∫∑c bi·ªát',
        image: '/images/recipes/goi-cuon.jpg',
        preparation_time: 15,
        cooking_time: 0,
        servings: 4,
        difficulty_level: 'easy',
        dietary_tags: JSON.stringify(['vegetarian', 'vegan', 'gluten_free']),
        cuisine_type: 'vietnamese',
        meal_type: 'snack',
        calories: 120,
        rating: 4.5,
        views: 650,
        is_featured: 1,
        is_active: 1,
        ingredients: [
          { name: 'B√°nh tr√°ng', quantity: '10', unit: 'c√°i', notes: 'B√°nh tr√°ng 22cm' },
          { name: 'B√∫n', quantity: '200', unit: 'g', notes: 'Lu·ªôc ch√≠n' },
          { name: 'X√† l√°ch', quantity: '100', unit: 'g', notes: null },
          { name: 'D∆∞a chu·ªôt', quantity: '1', unit: 'qu·∫£', notes: 'Th√°i s·ª£i' },
          { name: 'C√† r·ªët', quantity: '1', unit: 'c·ªß', notes: 'Th√°i s·ª£i' },
          { name: 'H√∫ng l·ªßi', quantity: '50', unit: 'g', notes: null },
          { name: 'Rau th∆°m c√°c lo·∫°i', quantity: '100', unit: 'g', notes: null }
        ],
        steps: [
          { instruction: 'Lu·ªôc b√∫n, ƒë·ªÉ ngu·ªôi', duration: 10, tips: 'Kh√¥ng lu·ªôc qu√° m·ªÅm' },
          { instruction: 'R·ª≠a s·∫°ch v√† chu·∫©n b·ªã rau c·ªß', duration: 5, tips: 'Ng√¢m rau v·ªõi n∆∞·ªõc mu·ªëi lo√£ng' },
          { instruction: 'Nh√∫ng b√°nh tr√°ng v√†o n∆∞·ªõc ·∫•m cho m·ªÅm', duration: 1, tips: 'N∆∞·ªõc ·∫•m v·ª´a ph·∫£i, kh√¥ng qu√° n√≥ng' },
          { instruction: 'X·∫øp rau, b√∫n l√™n b√°nh tr√°ng', duration: 2, tips: 'X·∫øp g·ªçn g√†ng ·ªü 1/3 b√°nh tr√°ng' },
          { instruction: 'Cu·ªën ch·∫∑t v√† c·∫Øt ƒë√¥i', duration: 1, tips: 'Cu·ªën ch·∫∑t tay nh∆∞ng ƒë·ª´ng r√°ch b√°nh' }
        ]
      }
    ];

    // Insert recipes
    for (const recipe of recipes) {
      console.log(`\nüìù Adding recipe: ${recipe.name}`);
      
      // Insert main recipe
      await connection.execute(
        `INSERT INTO recipes (
          id, name, description, image, preparation_time, cooking_time,
          servings, difficulty_level, dietary_tags, cuisine_type, meal_type,
          calories, rating, views, is_featured, is_active, created_by
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
          recipe.id,
          recipe.name,
          recipe.description,
          recipe.image,
          recipe.preparation_time,
          recipe.cooking_time,
          recipe.servings,
          recipe.difficulty_level,
          recipe.dietary_tags,
          recipe.cuisine_type,
          recipe.meal_type,
          recipe.calories,
          recipe.rating,
          recipe.views,
          recipe.is_featured,
          recipe.is_active,
          'admin'
        ]
      );
      
      // Insert ingredients
      for (let i = 0; i < recipe.ingredients.length; i++) {
        const ingredient = recipe.ingredients[i];
        await connection.execute(
          `INSERT INTO recipe_ingredients (
            id, recipe_id, ingredient_name, quantity, unit, notes, display_order, is_optional
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
          [
            `ing-${uuidv4()}`,
            recipe.id,
            ingredient.name,
            ingredient.quantity,
            ingredient.unit,
            ingredient.notes,
            i,
            0
          ]
        );
      }
      
      // Insert steps
      for (let i = 0; i < recipe.steps.length; i++) {
        const step = recipe.steps[i];
        await connection.execute(
          `INSERT INTO recipe_steps (
            id, recipe_id, step_number, instruction, duration_minutes, tips
          ) VALUES (?, ?, ?, ?, ?, ?)`,
          [
            `step-${uuidv4()}`,
            recipe.id,
            i + 1,
            step.instruction,
            step.duration || null,
            step.tips || null
          ]
        );
      }
      
      console.log(`‚úÖ Recipe "${recipe.name}" added successfully`);
    }
    
    console.log('\nüéâ All sample recipes added successfully!');
    console.log('You can now view them in the admin panel at /admin/recipes');
    
  } catch (error) {
    console.error('‚ùå Error adding sample recipes:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüëã Database connection closed');
    }
  }
}

// Run the script
addSampleRecipes()
  .then(() => {
    console.log('\n‚úÖ Sample recipes added successfully!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\n‚ùå Failed to add sample recipes:', error);
    process.exit(1);
  });
